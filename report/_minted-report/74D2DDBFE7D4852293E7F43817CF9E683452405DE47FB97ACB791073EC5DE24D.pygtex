\begin{Verbatim}[commandchars=\\\{\}]
\PYG{k+kd}{public} \PYG{k+kd}{class} \PYG{n+nc}{SemanticAnalyzer} \PYG{o}{\PYGZob{}}
	\PYG{n}{SymbolTable} \PYG{n}{Table}\PYG{o}{;}
	\PYG{n}{Node} \PYG{n}{StatementList}\PYG{o}{;}

	\PYG{c+cm}{/*}
\PYG{c+cm}{	 * The constructor of the semantic analyzer is passed a reference to the}
\PYG{c+cm}{	 * symbol table and one to the node representing the statement list of the}
\PYG{c+cm}{	 * syntax tree generated by the parse}
\PYG{c+cm}{	 */}
	\PYG{k+kd}{public} \PYG{n+nf}{SemanticAnalyzer}\PYG{o}{(}\PYG{n}{SymbolTable} \PYG{n}{table}\PYG{o}{,} \PYG{n}{Node} \PYG{n}{statementList}\PYG{o}{)} \PYG{o}{\PYGZob{}}
		\PYG{k}{this}\PYG{o}{.}\PYG{n+na}{Table} \PYG{o}{=} \PYG{n}{table}\PYG{o}{;}
		\PYG{k}{this}\PYG{o}{.}\PYG{n+na}{StatementList} \PYG{o}{=} \PYG{n}{statementList}\PYG{o}{;}
	\PYG{o}{\PYGZcb{}}

	\PYG{c+cm}{/*}
\PYG{c+cm}{	 * check if there are any semantic errors}
\PYG{c+cm}{	 */}
	\PYG{k+kd}{public} \PYG{k+kt}{void} \PYG{n+nf}{checkTypeErrors}\PYG{o}{()} \PYG{k+kd}{throws} \PYG{n}{Exception} \PYG{o}{\PYGZob{}}
		\PYG{n}{checkStatement}\PYG{o}{(}\PYG{k}{this}\PYG{o}{.}\PYG{n+na}{StatementList}\PYG{o}{);}
	\PYG{o}{\PYGZcb{}}

	\PYG{c+cm}{/*}
\PYG{c+cm}{	 * The following function loops over the statements in the statement list}
\PYG{c+cm}{	 * passed, and checks for semantic errors}
\PYG{c+cm}{	 */}
	\PYG{k+kd}{private} \PYG{k+kt}{void} \PYG{n+nf}{checkStatement}\PYG{o}{(}\PYG{n}{Node} \PYG{n}{statement}\PYG{o}{)} \PYG{k+kd}{throws} \PYG{n}{Exception} \PYG{o}{\PYGZob{}}
		\PYG{k}{for} \PYG{o}{(;} \PYG{n}{statement} \PYG{o}{!=} \PYG{k+kc}{null}\PYG{o}{;} \PYG{n}{statement} \PYG{o}{=} \PYG{n}{statement}\PYG{o}{.}\PYG{n+na}{getSibling}\PYG{o}{())} \PYG{o}{\PYGZob{}}
			\PYG{k}{switch} \PYG{o}{(}\PYG{n}{statement}\PYG{o}{.}\PYG{n+na}{getType}\PYG{o}{())} \PYG{o}{\PYGZob{}}
			\PYG{k}{case} \PYG{n}{if\PYGZus{}keyword}\PYG{o}{:} \PYG{o}{\PYGZob{}}
				\PYG{n}{getExpressionType}\PYG{o}{(}\PYG{n}{statement}\PYG{o}{.}\PYG{n+na}{getChild}\PYG{o}{(}\PYG{l+m+mi}{0}\PYG{o}{));}
				\PYG{n}{checkStatement}\PYG{o}{(}\PYG{n}{statement}\PYG{o}{.}\PYG{n+na}{getChild}\PYG{o}{(}\PYG{l+m+mi}{1}\PYG{o}{));}
				\PYG{k}{if} \PYG{o}{(}\PYG{n}{statement}\PYG{o}{.}\PYG{n+na}{getChildrenCount}\PYG{o}{()} \PYG{o}{==} \PYG{l+m+mi}{3}\PYG{o}{)}
					\PYG{n}{checkStatement}\PYG{o}{(}\PYG{n}{statement}\PYG{o}{.}\PYG{n+na}{getChild}\PYG{o}{(}\PYG{l+m+mi}{2}\PYG{o}{));}
				\PYG{k}{break}\PYG{o}{;}
			\PYG{o}{\PYGZcb{}}
			\PYG{k}{case} \PYG{n}{while\PYGZus{}keyword}\PYG{o}{:} \PYG{o}{\PYGZob{}}
				\PYG{n}{getExpressionType}\PYG{o}{(}\PYG{n}{statement}\PYG{o}{.}\PYG{n+na}{getChild}\PYG{o}{(}\PYG{l+m+mi}{0}\PYG{o}{));}
				\PYG{n}{checkStatement}\PYG{o}{(}\PYG{n}{statement}\PYG{o}{.}\PYG{n+na}{getChild}\PYG{o}{(}\PYG{l+m+mi}{1}\PYG{o}{));}
				\PYG{k}{break}\PYG{o}{;}
			\PYG{o}{\PYGZcb{}}
			\PYG{k}{case} \PYG{n}{assignment\PYGZus{}operator}\PYG{o}{:} \PYG{o}{\PYGZob{}}
				\PYG{c+c1}{// check for any type mismatch}
				\PYG{n}{getExpressionType}\PYG{o}{(}\PYG{n}{statement}\PYG{o}{);}
				\PYG{k}{break}\PYG{o}{;}
			\PYG{o}{\PYGZcb{}}
			\PYG{o}{\PYGZcb{}}
		\PYG{o}{\PYGZcb{}}
	\PYG{o}{\PYGZcb{}}

	\PYG{c+cm}{/*}
\PYG{c+cm}{	 * the following function is passed an expression and returns its type}
\PYG{c+cm}{	 * }
\PYG{c+cm}{	 * It checks for the following errors:}
\PYG{c+cm}{	 * }
\PYG{c+cm}{	 * 1. mismatching of the types of the two operands of any operator}
\PYG{c+cm}{	 * (assignment, addition, multiplication, relational)}
\PYG{c+cm}{	 * }
\PYG{c+cm}{	 * 2. use of any undeclared variables}
\PYG{c+cm}{	 */}
	\PYG{k+kd}{private} \PYG{n}{DataType} \PYG{n+nf}{getExpressionType}\PYG{o}{(}\PYG{n}{Node} \PYG{n}{node}\PYG{o}{)} \PYG{k+kd}{throws} \PYG{n}{Exception} \PYG{o}{\PYGZob{}}
		\PYG{k}{switch} \PYG{o}{(}\PYG{n}{node}\PYG{o}{.}\PYG{n+na}{getType}\PYG{o}{())} \PYG{o}{\PYGZob{}}
		\PYG{k}{case} \PYG{n}{integer\PYGZus{}literal}\PYG{o}{:}
			\PYG{k}{return} \PYG{n}{DataType}\PYG{o}{.}\PYG{n+na}{integer}\PYG{o}{;}
		\PYG{k}{case} \PYG{n}{real\PYGZus{}literal}\PYG{o}{:}
			\PYG{k}{return} \PYG{n}{DataType}\PYG{o}{.}\PYG{n+na}{real}\PYG{o}{;}
		\PYG{k}{case} \PYG{n}{assignment\PYGZus{}operator}\PYG{o}{:}
		\PYG{k}{case} \PYG{n}{addition\PYGZus{}operator}\PYG{o}{:}
		\PYG{k}{case} \PYG{n}{relational\PYGZus{}operator}\PYG{o}{:}
		\PYG{k}{case} \PYG{n}{multiplication\PYGZus{}operator}\PYG{o}{:} \PYG{o}{\PYGZob{}}
			\PYG{n}{DataType} \PYG{n}{leftType} \PYG{o}{=} \PYG{n}{getExpressionType}\PYG{o}{(}\PYG{n}{node}\PYG{o}{.}\PYG{n+na}{getChild}\PYG{o}{(}\PYG{l+m+mi}{0}\PYG{o}{));}
			\PYG{n}{DataType} \PYG{n}{rightType} \PYG{o}{=} \PYG{n}{getExpressionType}\PYG{o}{(}\PYG{n}{node}\PYG{o}{.}\PYG{n+na}{getChild}\PYG{o}{(}\PYG{l+m+mi}{1}\PYG{o}{));}
			\PYG{k}{if} \PYG{o}{(}\PYG{n}{leftType} \PYG{o}{!=} \PYG{n}{rightType}\PYG{o}{)}
				\PYG{k}{throw} \PYG{k}{new} \PYG{n}{Exception}\PYG{o}{(}
					\PYG{l+s}{\PYGZdq{}type mismatch between operands of \PYGZdq{}}
					\PYG{o}{+} \PYG{n}{node}\PYG{o}{.}\PYG{n+na}{getLexim}\PYG{o}{()} \PYG{o}{+} \PYG{l+s}{\PYGZdq{} on line \PYGZdq{}}
					\PYG{o}{+} \PYG{n}{Integer}\PYG{o}{.}\PYG{n+na}{toString}\PYG{o}{(}
						\PYG{n}{node}\PYG{o}{.}\PYG{n+na}{getDeclarationLineNumber}\PYG{o}{()));}
			\PYG{k}{else}
				\PYG{k}{return} \PYG{n}{leftType}\PYG{o}{;}
		\PYG{o}{\PYGZcb{}}
		\PYG{k}{case} \PYG{n}{identifier}\PYG{o}{:}
			\PYG{k}{return} \PYG{k}{this}\PYG{o}{.}\PYG{n+na}{Table}\PYG{o}{.}\PYG{n+na}{lookUp}\PYG{o}{(}\PYG{n}{node}\PYG{o}{.}\PYG{n+na}{getLexim}\PYG{o}{()).}\PYG{n+na}{getType}\PYG{o}{();}
		\PYG{k}{case} \PYG{n}{square\PYGZus{}bracket}\PYG{o}{:}
			\PYG{k}{return} \PYG{n}{getExpressionType}\PYG{o}{(}\PYG{n}{node}\PYG{o}{.}\PYG{n+na}{getChild}\PYG{o}{(}\PYG{l+m+mi}{0}\PYG{o}{));}
		\PYG{k}{default}\PYG{o}{:}
			\PYG{k}{throw} \PYG{k}{new} \PYG{n}{Exception}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}unexpected token \PYGZdq{}} \PYG{o}{+} \PYG{n}{node}\PYG{o}{.}\PYG{n+na}{getLexim}\PYG{o}{());}
		\PYG{o}{\PYGZcb{}}
	\PYG{o}{\PYGZcb{}}
\PYG{o}{\PYGZcb{}}
\end{Verbatim}
